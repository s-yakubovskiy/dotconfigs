# vim: set ft=sh: 
function proxy_on() {
    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"

    if (( $# > 0 )); then
        valid=$(echo $@ | sed -n 's/\([0-9]\{1,3\}.\?\)\{4\}:\([0-9]\+\)/&/p')
        if [[ $valid != $@ ]]; then
            >&2 echo "Invalid address"
            return 1
        fi
        local proxy=$1
        export http_proxy="$proxy" \
               https_proxy=$proxy \
               ftp_proxy=$proxy \
               rsync_proxy=$proxy
        echo "Proxy environment variable set."
        return 0
    fi

    echo -n "username: "; read username
    if [[ $username != "" ]]; then
        echo -n "password: "
        read -es password
        local pre="$username:$password@"
    fi

    echo -n "server: "; read server
    echo -n "port: "; read port
    local proxy=$pre$server:$port
    export http_proxy="$proxy" \
           https_proxy=$proxy \
           ftp_proxy=$proxy \
           rsync_proxy=$proxy \
           HTTP_PROXY=$proxy \
           HTTPS_PROXY=$proxy \
           FTP_PROXY=$proxy \
           RSYNC_PROXY=$proxy
}

function proxy_off(){
    unset http_proxy https_proxy ftp_proxy rsync_proxy \
          HTTP_PROXY HTTPS_PROXY FTP_PROXY RSYNC_PROXY
    echo -e "Proxy environment variable removed."
}

wrk() {
  if [ $1 ] || [ $ACTIVE_PROJ ]; then
    local proj_dir=$HOME/projects
    if [ $1 ]; then
      local targ=$1
    else
      local targ=$ACTIVE_PROJ
    fi
    if [ -d $proj_dir/$targ ]; then
      cd $proj_dir/$targ
      tput reset 2>/dev/null
      if git rev-parse --is-inside-work-tree &> /dev/null; then
        git status 2>/dev/null
      fi
    else
      echo "could not find project $targ in $proj_dir"
      return 2
    fi
  else
    echo "ACTIVE_PROJ not defined"
    return 1
  fi
}

_list_projects() {
  _files -W $HOME/projects -/;
}

compdef _list_projects wrk

jwtd() {
    if [[ -x $(command -v jq) ]]; then
         jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
         echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
    fi
}

b64d() {
    if [[ -x $(command -v base64) ]]; then
         if [ -z $1 ]; then
           1=$(</dev/stdin)
         fi
         echo $1 | base64 --decode
    fi
}
b64e() {
    if [[ -x $(command -v base64) ]]; then
         if [ -z $1 ]; then
           1=$(</dev/stdin)
         fi
         echo $1 | base64
    fi
}


wenv() {
  if [ $1 ] || [ $ACTIVE_WENV ]; then
    if [[ $ACTIVE_WENV ]]; then
      wenv=$ACTIVE_WENV
    else
      wenv=${1:-"default"}
    fi
    source $HOME/.config/shell/wenv/$wenv
    echo $wenv >/tmp/wenv_active
  else
    echo "ACTIVE_WENV not defined"
    return 1
  fi
}

_list_wenvs() {
  _files -W $HOME/.config/shell/wenv -/;
}
compdef _list_wenvs wenv

function kubectlgetall {
  for i in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
    echo "Resource:" $i
    kubectl -n ${1} get --ignore-not-found ${i}
  done
}
